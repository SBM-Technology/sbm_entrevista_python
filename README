# Teste Python - N√≠vel Pleno (Flask + Dashboard + Dados)

## Objetivo
Avaliar compet√™ncias t√©cnicas de desenvolvedor Python Pleno com foco em Flask, cria√ß√£o de dashboards, visualiza√ß√£o de dados, tratamento de dados e coleta de informa√ß√µes.

---

## Cen√°rios Propostos para Discuss√£o

### üéØ Cen√°rio 1: Dashboard de Vendas com Coleta e Visualiza√ß√£o
**Objetivo:** Avaliar conhecimento completo em Flask, coleta de dados, processamento e visualiza√ß√£o.

**Descri√ß√£o:**
Desenvolver um dashboard web que:
- **Coleta de dados:**
  - Upload de planilhas CSV/Excel com dados de vendas
  - Integra√ß√£o com API externa (ex: API p√∫blica de dados de vendas ou mock)
  - Formul√°rio para inser√ß√£o manual de vendas
- **Tratamento de dados:**
  - Processamento e limpeza dos dados coletados
  - Valida√ß√£o de dados (campos obrigat√≥rios, tipos, consist√™ncia)
  - Agrega√ß√µes (vendas por per√≠odo, por produto, por vendedor)
  - C√°lculo de m√©tricas (total, m√©dia, crescimento)
- **Visualiza√ß√£o:**
  - Dashboard com m√∫ltiplos gr√°ficos (Chart.js, Plotly ou similar)
  - Gr√°fico de linhas: evolu√ß√£o de vendas ao longo do tempo
  - Gr√°fico de barras: vendas por produto/categoria
  - Gr√°fico de pizza: distribui√ß√£o por regi√£o
  - Tabela interativa com filtros e ordena√ß√£o
  - Cards com KPI's principais (total vendas, ticket m√©dio, etc.)
- **Funcionalidades:**
  - Filtros por per√≠odo (data inicial/final)
  - Exporta√ß√£o de relat√≥rios (PDF ou CSV)
  - Hist√≥rico de uploads de arquivos
  - Armazenamento em banco de dados (SQLite ou PostgreSQL)

**Pontos de avalia√ß√£o:**
- Estrutura√ß√£o do projeto Flask (blueprints, templates, static)
- Processamento eficiente de dados (pandas, agrega√ß√µes)
- Manipula√ß√£o de arquivos (CSV, Excel)
- Integra√ß√£o com APIs externas (requests)
- Valida√ß√£o e tratamento de erros
- Cria√ß√£o de visualiza√ß√µes interativas
- Queries otimizadas no banco
- Interface responsiva e intuitiva
- Performance no processamento de grandes volumes

**Complexidade:** M√©dia-Alta

**Tecnologias esperadas:**
- Flask, SQLAlchemy, pandas
- Chart.js ou Plotly.js (client-side) ou Plotly Python (server-side)
- openpyxl ou pandas para Excel
- Jinja2 templates

---

### üéØ Cen√°rio 2: Sistema de Monitoramento de Indicadores com Web Scraping
**Objetivo:** Avaliar web scraping, tratamento de dados n√£o estruturados e dashboards em tempo real.

**Descri√ß√£o:**
Sistema que monitora e exibe indicadores coletados automaticamente:
- **Coleta de dados:**
  - Web scraping de sites p√∫blicos (ex: pre√ßos de produtos, cota√ß√µes, clima)
  - Agendamento de coletas (APScheduler ou Celery Beat)
  - M√∫ltiplas fontes de dados simult√¢neas
  - API REST para coleta manual via endpoint
- **Tratamento:**
  - Parsing de HTML/XML (BeautifulSoup, lxml)
  - Normaliza√ß√£o de dados de diferentes fontes
  - Detec√ß√£o de mudan√ßas significativas (alertas)
  - Limpeza de dados malformados
- **Visualiza√ß√£o:**
  - Dashboard em tempo real (atualiza√ß√£o autom√°tica)
  - Gr√°fico de s√©ries temporais mostrando evolu√ß√£o
  - Compara√ß√£o entre diferentes fontes
  - Alertas visuais quando valores excedem limites
  - Tabela de hist√≥rico com timestamps
  - Gr√°fico de tend√™ncia (regress√£o simples)
- **Funcionalidades:**
  - Configura√ß√£o de fontes de dados via interface
  - Logs de coletas (sucesso/falha)
  - Sistema de alertas por e-mail (opcional)
  - Exporta√ß√£o de dados coletados

**Pontos de avalia√ß√£o:**
- Web scraping eficiente e √©tico (headers, delays)
- Tratamento de HTML malformado
- Agendamento de tarefas
- Processamento ass√≠ncrono (quando necess√°rio)
- Armazenamento de dados temporais
- Visualiza√ß√µes em tempo real (WebSockets ou polling)
- Tratamento de exce√ß√µes em scraping
- Rate limiting e respeito a robots.txt

**Complexidade:** Alta

**Tecnologias esperadas:**
- Flask, SQLAlchemy
- BeautifulSoup4, requests, selenium (se necess√°rio)
- APScheduler ou Celery
- Chart.js, Plotly ou D3.js
- Flask-SocketIO (opcional, para real-time)

---

### üéØ Cen√°rio 3: Dashboard Anal√≠tico com M√∫ltiplas Fontes de Dados
**Objetivo:** Avaliar ETL completo, integra√ß√£o de m√∫ltiplas fontes e an√°lise de dados complexa.

**Descri√ß√£o:**
Dashboard que integra e analisa dados de diferentes origens:
- **Coleta:**
  - Importa√ß√£o de arquivos (CSV, JSON, Excel)
  - Integra√ß√£o com API REST externa
  - Conex√£o com banco de dados externo (read-only)
  - Formul√°rio web para entrada de dados
- **Tratamento e An√°lise:**
  - Join/integra√ß√£o de dados de m√∫ltiplas fontes
  - Normaliza√ß√£o e padroniza√ß√£o
  - C√°lculo de m√©tricas avan√ßadas (correla√ß√µes, m√©dias m√≥veis)
  - An√°lise estat√≠stica b√°sica (desvio padr√£o, quartis)
  - Agrega√ß√µes complexas (group by m√∫ltiplos campos)
- **Visualiza√ß√£o:**
  - Painel com m√∫ltiplos gr√°ficos correlacionados
  - Heatmap de correla√ß√µes
  - Gr√°fico de dispers√£o com m√∫ltiplas dimens√µes
  - Treemap para hierarquias
  - Filtros interativos que atualizam todos os gr√°ficos
  - Drill-down (clicar em gr√°fico para detalhar)
- **Funcionalidades:**
  - Configura√ß√£o de conex√µes de dados
  - Cache de resultados de an√°lises pesadas
  - Agendamento de atualiza√ß√µes autom√°ticas
  - Compara√ß√£o de per√≠odos (m√™s anterior, ano anterior)
  - Relat√≥rios comparativos (PDF)

**Pontos de avalia√ß√£o:**
- Arquitetura de ETL bem estruturada
- Manipula√ß√£o eficiente de grandes volumes
- Join e merge de datasets
- An√°lise estat√≠stica (pandas, numpy)
- Performance em queries complexas
- Cache e otimiza√ß√£o
- Interface interativa e responsiva
- Tratamento de dados inconsistentes
- Documenta√ß√£o de transforma√ß√µes

**Complexidade:** Alta

**Tecnologias esperadas:**
- Flask, SQLAlchemy
- pandas, numpy
- Plotly (Dash ou integra√ß√£o)
- Redis ou Flask-Caching (cache)
- scipy (an√°lise estat√≠stica, opcional)

---

### üéØ Cen√°rio 4: Plataforma de An√°lise de Dados de Tr√°fego Web
**Objetivo:** Avaliar processamento de logs, an√°lise de comportamento e dashboards interativos.

**Descri√ß√£o:**
Sistema para an√°lise de logs de acesso web:
- **Coleta:**
  - Upload de arquivos de log (Apache, Nginx ou formato customizado)
  - API para receber logs em tempo real (webhook)
  - Parsing de diferentes formatos de log
- **Tratamento:**
  - Parsing e estrutura√ß√£o de logs n√£o estruturados
  - Extra√ß√£o de m√©tricas (IP, user-agent, status code, path, timestamp)
  - Identifica√ß√£o de padr√µes (picos de tr√°fego, erros)
  - Detec√ß√£o de anomalias b√°sicas
  - Agrega√ß√£o por per√≠odos (hora, dia, semana)
- **Visualiza√ß√£o:**
  - Dashboard com m√©tricas principais (requisi√ß√µes/minuto, status codes)
  - Gr√°fico de linhas: tr√°fego ao longo do tempo
  - Gr√°fico de barras: p√°ginas mais acessadas (top 10)
  - Mapa de calor temporal (heatmap por hora do dia)
  - Distribui√ß√£o geogr√°fica (se houver dados de IP/geolocaliza√ß√£o)
  - Gr√°fico de status codes (4xx, 5xx)
  - Filtros por IP, path, status code
- **Funcionalidades:**
  - Busca avan√ßada nos logs
  - Exporta√ß√£o de an√°lises
  - Alertas para picos de erro
  - Compara√ß√£o entre per√≠odos
  - Reten√ß√£o configur√°vel de hist√≥rico

**Pontos de avalia√ß√£o:**
- Parsing eficiente de arquivos grandes
- Regex e parsing de strings complexas
- Processamento streaming (para logs grandes)
- Agrega√ß√µes temporais
- Visualiza√ß√µes apropriadas para dados temporais
- Performance com grandes volumes
- Tratamento de logs malformados
- An√°lise de padr√µes

**Complexidade:** M√©dia-Alta

**Tecnologias esperadas:**
- Flask, SQLAlchemy
- pandas para processamento
- Regex (re module)
- Chart.js ou Plotly
- Geopy (opcional, para geolocaliza√ß√£o)

---

### üéØ Cen√°rio 5: Dashboard de M√©tricas de Produto com Formul√°rios Din√¢micos
**Objetivo:** Avaliar coleta via formul√°rios complexos, valida√ß√£o avan√ßada e visualiza√ß√µes contextuais.

**Descri√ß√£o:**
Sistema para coletar e visualizar m√©tricas de produto/servi√ßo:
- **Coleta:**
  - Formul√°rios din√¢micos (campos aparecem condicionalmente)
  - Upload de arquivos com dados estruturados
  - Importa√ß√£o de CSV com m√∫ltiplos formatos
  - API para integra√ß√£o externa
  - Valida√ß√µes complexas (regras de neg√≥cio)
- **Tratamento:**
  - Enriquecimento de dados (lookups, c√°lculos derivados)
  - Valida√ß√£o cruzada entre campos
  - Normaliza√ß√£o de unidades (moedas, datas, medidas)
  - Deduplica√ß√£o de registros
  - C√°lculo de √≠ndices e scores compostos
- **Visualiza√ß√£o:**
  - Dashboard executivo (vis√£o geral com KPIs)
  - Gr√°ficos interativos com tooltips detalhados
  - Compara√ß√£o de m√∫ltiplas s√©ries no mesmo gr√°fico
  - Dashboard responsivo (mobile-friendly)
  - Exporta√ß√£o de gr√°ficos como imagens
  - Filtros avan√ßados (m√∫ltipla sele√ß√£o, ranges)
- **Funcionalidades:**
  - Formul√°rios multi-step
  - Autocomplete em campos
  - Valida√ß√£o client-side e server-side
  - Hist√≥rico de altera√ß√µes (auditoria)
  - Compartilhamento de dashboards (links com filtros salvos)
  - Agendamento de relat√≥rios autom√°ticos

**Pontos de avalia√ß√£o:**
- Formul√°rios din√¢micos e valida√ß√£o complexa
- Processamento de diferentes formatos de entrada
- C√°lculos e transforma√ß√µes de dados
- Visualiza√ß√µes contextualmente apropriadas
- UX/UI bem pensada
- Performance em formul√°rios complexos
- Seguran√ßa (XSS, CSRF)
- Auditoria e rastreabilidade

**Complexidade:** M√©dia-Alta

**Tecnologias esperadas:**
- Flask, SQLAlchemy
- WTForms ou Flask-WTF
- pandas
- Chart.js ou Plotly
- JavaScript vanilla ou jQuery (para interatividade)

---

### üéØ Cen√°rio 6: Dashboard de Coleta e An√°lise de Feedback/Reviews
**Objetivo:** Avaliar coleta de dados de texto, an√°lise de sentimento b√°sica e visualiza√ß√£o de dados qualitativos.

**Descri√ß√£o:**
Plataforma para coletar e analisar feedback de clientes:
- **Coleta:**
  - Web scraping de reviews de sites (ex: Google Reviews, App Store)
  - API para receber feedback
  - Formul√°rio de pesquisa/NPS
  - Importa√ß√£o de CSV com reviews
- **Tratamento:**
  - An√°lise de sentimento b√°sica (polaridade positiva/negativa/neutra)
  - Extra√ß√£o de palavras-chave/t√≥picos principais
  - Categoriza√ß√£o autom√°tica (se poss√≠vel)
  - Contagem de men√ß√µes
  - Filtragem de spam/ru√≠do
- **Visualiza√ß√£o:**
  - Gr√°fico de sentimento ao longo do tempo
  - Word cloud (nuvem de palavras)
  - Distribui√ß√£o de sentimentos (pie chart)
  - Gr√°fico de barras: t√≥picos mais mencionados
  - Tabela de reviews com filtros e busca
  - Score de NPS visual (gauge chart)
- **Funcionalidades:**
  - Filtros por per√≠odo, sentimento, categoria
  - Exporta√ß√£o de an√°lises
  - Alertas para picos de feedback negativo
  - Compara√ß√£o de per√≠odos
  - Busca textual nos reviews

**Pontos de avalia√ß√£o:**
- Web scraping √©tico
- Processamento de texto (NLP b√°sico)
- An√°lise de sentimento (TextBlob, VADER ou similar)
- Visualiza√ß√£o de dados qualitativos
- Performance em grandes volumes de texto
- Tratamento de diferentes idiomas (opcional)
- Limpeza de texto (remover HTML, normalizar)

**Complexidade:** M√©dia-Alta

**Tecnologias esperadas:**
- Flask, SQLAlchemy
- BeautifulSoup4, requests
- TextBlob, VADER ou NLTK (an√°lise de sentimento)
- wordcloud (biblioteca Python)
- Chart.js ou Plotly

---

## üîß Stack Tecnol√≥gica Recomendada

### Core
- **Framework:** Flask 2.x+
- **ORM:** SQLAlchemy
- **Banco de Dados:** PostgreSQL ou SQLite (para testes)
- **Templates:** Jinja2

### Dados
- **Processamento:** pandas, numpy
- **Arquivos:** openpyxl (Excel), csv module
- **APIs:** requests, httpx
- **Web Scraping:** BeautifulSoup4, selenium (se necess√°rio)

### Visualiza√ß√£o
- **Client-side:** Chart.js, Plotly.js, D3.js
- **Server-side (opcional):** Plotly Python, matplotlib
- **Gr√°ficos avan√ßados:** Plotly Dash (integrado com Flask)

### Utilidades
- **Valida√ß√£o:** WTForms, Pydantic
- **Agendamento:** APScheduler, Celery
- **Cache:** Flask-Caching, Redis
- **An√°lise de Texto:** TextBlob, NLTK, VADER
- **Testes:** pytest

---

## üìã Crit√©rios de Avalia√ß√£o Geral

### Coleta de Dados
- [ ] Implementa√ß√£o eficiente e √©tica de web scraping
- [ ] Tratamento adequado de diferentes formatos de entrada
- [ ] Valida√ß√£o de dados na coleta
- [ ] Tratamento de erros e falhas na coleta
- [ ] Rate limiting e respeito a termos de uso

### Tratamento de Dados
- [ ] Limpeza e normaliza√ß√£o de dados
- [ ] Valida√ß√£o robusta
- [ ] Agrega√ß√µes e transforma√ß√µes corretas
- [ ] Performance com grandes volumes
- [ ] Tratamento de dados inconsistentes/malformados
- [ ] Deduplica√ß√£o quando necess√°rio

### Visualiza√ß√£o
- [ ] Escolha apropriada de tipos de gr√°ficos
- [ ] Interface intuitiva e responsiva
- [ ] Interatividade (filtros, tooltips, drill-down)
- [ ] Performance de renderiza√ß√£o
- [ ] Acessibilidade b√°sica

### Flask e Arquitetura
- [ ] Estrutura√ß√£o do projeto (blueprints, organiza√ß√£o)
- [ ] Separa√ß√£o de responsabilidades (MVC/MVT)
- [ ] Templates reutiliz√°veis
- [ ] Rotas bem organizadas
- [ ] Tratamento de erros global

### C√≥digo
- [ ] Type hints e docstrings
- [ ] Clean code e boas pr√°ticas Python
- [ ] Testes unit√°rios e de integra√ß√£o
- [ ] Performance considerada
- [ ] Seguran√ßa (valida√ß√£o de entrada, XSS, CSRF)

---

## üìù Observa√ß√µes para Discuss√£o

1. **Tempo estimado:** Cada cen√°rio pode levar 6-12 horas (dashboard completo)
2. **N√≠vel de detalhe:** Definir se √© MVP funcional ou mais completo
3. **Bibliotecas de visualiza√ß√£o:** Definir se Chart.js (mais simples) ou Plotly (mais avan√ßado)
4. **Dados de exemplo:** Fornecer datasets ou o candidato deve criar/mockar?
5. **Deploy:** Avaliar se precisa considerar deploy (Docker, Heroku, etc.)?
6. **Design:** Definir se avalia√ß√£o inclui CSS/UI ou foco apenas em funcionalidade

---

## üéØ Recomenda√ß√µes

Para avaliar um **Python Pleno** focado em dashboard e dados, sugeriria:

### Op√ß√£o 1: Cen√°rio Completo
- **Cen√°rio 1** (Dashboard de Vendas) - cobre coleta, tratamento e visualiza√ß√£o de forma completa

### Op√ß√£o 2: Combina√ß√£o de Cen√°rios
- **Cen√°rio 2** (Web Scraping) - para avaliar coleta avan√ßada
- **Cen√°rio 4** (An√°lise de Logs) - para avaliar tratamento e visualiza√ß√£o

### Op√ß√£o 3: Cen√°rio + Discuss√£o
- Um cen√°rio simplificado + perguntas t√©cnicas sobre:
  - Decis√µes de arquitetura
  - Escolha de bibliotecas de visualiza√ß√£o
  - Otimiza√ß√£o de performance
  - Tratamento de dados em escala

---

## üí° Cen√°rio Simplificado (Sugest√£o para Teste Pr√°tico)

### Dashboard de Vendas Simplificado
**Coleta:**
- Upload de CSV com vendas
- API mock para simular vendas

**Tratamento:**
- Agrega√ß√µes por m√™s, produto
- C√°lculo de total, m√©dia, crescimento

**Visualiza√ß√£o:**
- 3 gr√°ficos: linha (evolu√ß√£o), barra (por produto), pizza (por regi√£o)
- Tabela com dados
- Filtros de data

**Tempo estimado:** 4-6 horas

---

## üí¨ Pr√≥ximos Passos

1. Selecionar cen√°rio(s) para o teste
2. Criar estrutura base do projeto (template)
3. Definir crit√©rios de aceita√ß√£o espec√≠ficos
4. Preparar datasets de exemplo (ou instru√ß√µes para criar)
5. Definir ambiente de avalia√ß√£o
6. Criar checklist de avalia√ß√£o detalhado