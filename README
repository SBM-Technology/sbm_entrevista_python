# 📊 Dashboard Analítico - Teste Python Pleno

Este é um projeto de teste técnico para avaliar competências em Python, Flask, manipulação de dados e visualizações.

## 📋 Sobre o Projeto

Dashboard analítico que integra dados de múltiplas fontes (CSV, APIs públicas, JSON) para análise de vendas, apresentando:
- KPIs principais (receita, ticket médio, número de vendas)
- Gráficos interativos (linhas, barras, pizza)
- Integração com APIs de cotações e dados econômicos
- Sistema de upload de arquivos CSV
- Filtros por período

---

## 🚀 Tecnologias Utilizadas

- **Backend:** Flask 3.0, SQLAlchemy, pandas
- **Frontend:** Bootstrap 5, Chart.js
- **Banco de Dados:** SQLite (desenvolvimento)
- **APIs Externas:** AwesomeAPI (cotações), Brasil API (taxas)
- **Python:** 3.11+

---

## 📁 Estrutura do Projeto

```
sbm_entrevista_python/
├── app/
│   ├── __init__.py              # Factory da aplicação
│   ├── blueprints/              # Rotas organizadas
│   │   ├── dashboard.py         # Dashboard principal
│   │   └── api.py               # Endpoints da API
│   ├── models/                  # Models do banco de dados
│   │   ├── venda.py
│   │   ├── custo.py
│   │   ├── cotacao.py
│   │   ├── meta.py
│   │   └── upload.py
│   ├── services/                # Lógica de negócio
│   │   ├── data_collector.py   # Coleta de APIs
│   │   ├── data_processor.py   # Processamento de dados
│   │   └── analytics.py        # Análises estatísticas
│   ├── static/                  # CSS, JavaScript
│   └── templates/               # Templates HTML
├── data/                        # Dados do projeto
│   ├── csv/                     # Arquivos CSV
│   │   ├── vendas.csv
│   │   └── custos.csv
│   ├── json/                    # Arquivos JSON
│   │   └── metas.json
│   └── uploads/                 # Uploads do usuário
├── docs/                        # Documentação
│   └── API_PUBLICA_REFERENCIAS.md
├── scripts/                     # Scripts utilitários
│   ├── generate_sample_data.py
│   └── import_initial_data.py
├── tests/                       # Testes
├── app.py                       # Entry point
├── config.py                    # Configurações
├── requirements.txt             # Dependências
├── DESAFIO.md                   # Descrição do desafio
└── README.md                    # Este arquivo
```

---

## ⚙️ Instalação e Configuração

### 1. Pré-requisitos

- Python 3.11 ou superior
- pip (gerenciador de pacotes Python)
- Git

### 2. Clone o Repositório

```bash
git clone <url-do-repositorio>
cd sbm_entrevista_python
```

### 3. Crie e Ative o Ambiente Virtual

**Linux/Mac:**
```bash
python3.11 -m venv venv
source venv/bin/activate
```

**Windows:**
```bash
python -m venv venv
venv\Scripts\activate
```

### 4. Instale as Dependências

```bash
pip install -r requirements.txt
```

### 5. Configure as Variáveis de Ambiente (opcional)

Crie um arquivo `.env` na raiz do projeto:

```env
FLASK_APP=app.py
FLASK_ENV=development
SECRET_KEY=sua-chave-secreta-aqui
DATABASE_URL=sqlite:///instance/dashboard.db
```

---

## 🎲 Gerando Dados de Exemplo

Os dados de exemplo já foram gerados, mas você pode regerá-los:

```bash
python3.11 scripts/generate_sample_data.py
```

Isso irá criar:
- `data/csv/vendas.csv` - 1000 registros de vendas
- `data/csv/custos.csv` - 20 produtos com custos
- `data/json/metas.json` - Metas por categoria/região/mês

---

## 💾 Inicializando o Banco de Dados

### Opção 1: Usando o script de importação

```bash
python3.11 scripts/import_initial_data.py
```

Este script irá:
1. Criar as tabelas no banco de dados
2. Importar os dados de vendas, custos e metas
3. Exibir estatísticas da importação

### Opção 2: Via Flask CLI

```bash
flask init-db
flask import-data
```

---

## 🏃 Executando a Aplicação

### Modo Desenvolvimento

```bash
python3.11 app.py
```

Ou usando Flask CLI:

```bash
flask run
```

A aplicação estará disponível em: **http://localhost:5000**

### Modo Debug (com auto-reload)

```bash
export FLASK_ENV=development  # Linux/Mac
set FLASK_ENV=development     # Windows

flask run --debug
```

---

## 🧪 Testando a Aplicação

### Testes Automatizados (quando implementados)

```bash
pytest
```

Com cobertura:

```bash
pytest --cov=app tests/
```

### Teste Manual

1. Acesse http://localhost:5000
2. Visualize os KPIs e gráficos
3. Teste os filtros de data
4. Faça upload de um CSV via modal
5. Verifique a atualização dos dados

---

## 📊 Funcionalidades Principais

### Dashboard
- **KPIs:** Receita total, número de vendas, ticket médio
- **Gráfico de Linhas:** Evolução de vendas ao longo do tempo
- **Gráfico de Barras:** Vendas por categoria
- **Gráfico de Pizza:** Distribuição por região
- **Gráfico Horizontal:** Top 10 produtos mais vendidos

### Upload de Dados
- Upload de arquivos CSV
- Validação de formato
- Feedback de processamento
- Histórico de uploads

### Filtros
- Filtro por período (data inicial/final)
- Atualização dinâmica de todos os gráficos
- Limpeza de filtros

### APIs Externas
- Coleta de cotações (AwesomeAPI)
- Coleta de taxas (Brasil API)
- Cache de resultados
- Tratamento de erros

---

## 🔌 Endpoints da API

### Dashboard

```
GET /
Página principal do dashboard

GET /data/kpis?data_inicio=YYYY-MM-DD&data_fim=YYYY-MM-DD
Retorna KPIs principais

GET /data/vendas-tempo?data_inicio=YYYY-MM-DD&data_fim=YYYY-MM-DD
Retorna série temporal de vendas

GET /data/vendas-categoria?data_inicio=YYYY-MM-DD&data_fim=YYYY-MM-DD
Retorna vendas agregadas por categoria

GET /data/vendas-regiao?data_inicio=YYYY-MM-DD&data_fim=YYYY-MM-DD
Retorna vendas agregadas por região

GET /data/top-produtos?data_inicio=YYYY-MM-DD&data_fim=YYYY-MM-DD&limite=10
Retorna top N produtos mais vendidos
```

### API Interna

```
POST /api/upload
Upload de arquivo CSV
Form data: file, tipo

POST /api/cotacoes/atualizar
Atualiza cotações de moedas via API externa

GET /api/uploads
Lista histórico de uploads
```

---

## 🗄️ Modelo de Dados

### Vendas
```sql
id, data, produto, categoria, quantidade, preco_unitario,
valor_total, regiao, vendedor, created_at
```

### Custos
```sql
id, produto, categoria, custo_unitario, data_atualizacao, created_at
```

### Cotações
```sql
id, moeda, valor, data_hora, created_at
```

### Metas
```sql
id, ano, mes, categoria, regiao, meta_valor, meta_quantidade, created_at
```

### Uploads
```sql
id, nome_arquivo, tipo, status, num_registros, mensagem_erro, created_at
```

---

## 🌐 APIs Externas Utilizadas

### AwesomeAPI - Cotações de Moedas
- **Docs:** https://docs.awesomeapi.com.br/api-de-moedas
- **Endpoint:** `https://economia.awesomeapi.com.br/last/USD-BRL,EUR-BRL`
- **Uso:** Coleta de cotações de moedas
- **Cache:** 5 minutos

### Brasil API - Dados Econômicos
- **Docs:** https://brasilapi.com.br/docs
- **Endpoint:** `https://brasilapi.com.br/api/taxas/v1`
- **Uso:** Taxas de juros (SELIC, CDI)
- **Cache:** 1 hora

Ver documentação completa em: `docs/API_PUBLICA_REFERENCIAS.md`

---

## 🛠️ Desenvolvimento

### Adicionando Novas Funcionalidades

1. **Models:** Adicione em `app/models/`
2. **Rotas:** Adicione em `app/blueprints/`
3. **Services:** Adicione lógica em `app/services/`
4. **Templates:** Adicione em `app/templates/`
5. **Testes:** Adicione em `tests/`

### Boas Práticas

- Use type hints
- Documente funções com docstrings
- Siga PEP 8
- Escreva testes
- Use migrations para mudanças no banco

---

## 📝 TODO / Melhorias Futuras

- [ ] Implementar testes automatizados
- [ ] Adicionar autenticação de usuários
- [ ] Implementar paginação nas tabelas
- [ ] Adicionar exportação de relatórios (PDF)
- [ ] Implementar agendamento de coletas (Celery)
- [ ] Adicionar mais análises estatísticas
- [ ] Implementar cache com Redis
- [ ] Melhorar responsividade mobile
- [ ] Adicionar dark mode
- [ ] Dockerizar a aplicação

---

## 🐛 Troubleshooting

### Erro: "ModuleNotFoundError"
```bash
# Certifique-se de ter ativado o ambiente virtual
source venv/bin/activate  # ou venv\Scripts\activate no Windows

# Reinstale as dependências
pip install -r requirements.txt
```

### Erro: "Unable to open database file"
```bash
# Crie o diretório instance
mkdir -p instance

# Execute novamente
python3.11 scripts/import_initial_data.py
```

### Erro no import dos dados
```bash
# Verifique se os arquivos CSV existem
ls -la data/csv/

# Se necessário, regere os dados
python3.11 scripts/generate_sample_data.py
```

### Gráficos não aparecem
- Verifique o console do navegador (F12)
- Certifique-se de que há dados no banco
- Limpe o cache do navegador

---

## 📄 Licença

Este projeto é para fins educacionais e de avaliação técnica.

---

## 📧 Contato

Para dúvidas sobre o desafio, entre em contato com o recrutador.

---

## 🎯 Critérios de Avaliação

Este projeto será avaliado nos seguintes aspectos:

- ✅ **Funcionalidade:** Todas as features implementadas e funcionando
- ✅ **Código:** Organização, clareza, boas práticas Python
- ✅ **Arquitetura:** Separação de responsabilidades, estrutura do projeto
- ✅ **Dados:** Processamento eficiente, análises corretas
- ✅ **Interface:** Visualizações apropriadas, usabilidade
- ✅ **Documentação:** README claro, código documentado
- ✅ **Extras:** Testes, cache, otimizações, criatividade

---

**Desenvolvido como teste técnico para vaga de Python Pleno** 🚀